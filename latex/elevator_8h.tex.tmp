\hypertarget{elevator_8h}{}\section{source/elevator.h File Reference}
\label{elevator_8h}\index{source/elevator.\+h@{source/elevator.\+h}}


elevator operations and states are in this file.  


{\ttfamily \#include \char`\"{}order\+Queue.\+h\char`\"{}}\newline
Include dependency graph for elevator.\+h\+:
% FIG 0
This graph shows which files directly or indirectly include this file\+:
% FIG 1
\subsection*{Typedefs}
\begin{DoxyCompactItemize}
\item 
\mbox{\Hypertarget{elevator_8h_a7772897d0691f9c1b54ecf5c59637d39}\label{elevator_8h_a7772897d0691f9c1b54ecf5c59637d39}} 
typedef \hyperlink{elevator_8h_a5d74787dedbc4e11c1ab15bf487e61f8}{State}($\ast$ \hyperlink{elevator_8h_a7772897d0691f9c1b54ecf5c59637d39}{State\+Function}) ()
\begin{DoxyCompactList}\small\item\em State function pointer typedef-\/ed. Used in transitioning between states in {\ttfamily \hyperlink{main_8c_source}{main.\+c}}. \end{DoxyCompactList}\end{DoxyCompactItemize}
\subsection*{Enumerations}
\begin{DoxyCompactItemize}
\item 
\mbox{\Hypertarget{elevator_8h_a5d74787dedbc4e11c1ab15bf487e61f8}\label{elevator_8h_a5d74787dedbc4e11c1ab15bf487e61f8}} 
enum \hyperlink{elevator_8h_a5d74787dedbc4e11c1ab15bf487e61f8}{State} \{ \newline
{\bfseries I\+D\+LE}, 
{\bfseries M\+O\+VE}, 
{\bfseries H\+A\+N\+D\+L\+E\+\_\+\+O\+R\+D\+ER}, 
{\bfseries D\+O\+O\+R\+S\+\_\+\+O\+P\+E\+N\+\_\+\+T\+I\+M\+ER}, 
\newline
{\bfseries E\+M\+E\+R\+G\+E\+N\+C\+Y\+\_\+\+S\+T\+OP}
 \}\begin{DoxyCompactList}\small\item\em Enum containing values to indicate elevator\textquotesingle{}s current state. Used in the state machine implemented in {\ttfamily \hyperlink{main_8c_source}{main.\+c}}. \end{DoxyCompactList}
\end{DoxyCompactItemize}
\subsection*{Functions}
\begin{DoxyCompactItemize}
\item 
\mbox{\Hypertarget{elevator_8h_a459f250209099053fec8ae5baca9217a}\label{elevator_8h_a459f250209099053fec8ae5baca9217a}} 
void \hyperlink{elevator_8h_a459f250209099053fec8ae5baca9217a}{elevator\+\_\+init} ()
\begin{DoxyCompactList}\small\item\em Initializes arrays and resets lights. \end{DoxyCompactList}\item 
int \hyperlink{elevator_8h_a2838e9ede4e7884da6efa80c9cc21c46}{elevator\+\_\+find\+Current\+Floor} (int last\+Floor)
\begin{DoxyCompactList}\small\item\em Checks if new floor is reached. \end{DoxyCompactList}\item 
int \hyperlink{elevator_8h_a08f3a6ced7b1be73a7189dfce3e9f2b9}{elevator\+\_\+am\+I\+At\+Floor} (int target\+Floor)
\begin{DoxyCompactList}\small\item\em Checks if target destination (first element of order\+Queue) is reached. \end{DoxyCompactList}\item 
int \hyperlink{elevator_8h_a6fb864f464d5b4430d4daf8ab7fd9f40}{elevator\+\_\+am\+I\+At\+Any\+Floor} ()
\begin{DoxyCompactList}\small\item\em Checks whether the elevator is at a floor or inbetween floors. Note that this function does not check which floor the elevator might be at, only whether it\textquotesingle{}s at one or not. \end{DoxyCompactList}\item 
void \hyperlink{elevator_8h_a6a2cb30d149b5ce3abcf9ca57fce26a3}{elevator\+\_\+check\+And\+Add\+Order} (int current\+Floor, \hyperlink{hardware_8h_a2167c399a24df296afc432bcb88228af}{Hardware\+Movement} move\+Direction)
\begin{DoxyCompactList}\small\item\em Checks if someone places any valid order at any place. Will initialize this order and adds it to order\+Queue. \end{DoxyCompactList}\item 
void \hyperlink{elevator_8h_a5e3ee96258c5727f28b6f935938c232f}{elevator\+\_\+set\+Relative\+Position} (\hyperlink{hardware_8h_a2167c399a24df296afc432bcb88228af}{Hardware\+Movement} move\+Direction)
\begin{DoxyCompactList}\small\item\em Sets new {\ttfamily g\+\_\+relative\+Position} when needed. Keeps track of where we are. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{elevator_8h_a8008c6e5c3579e371d47d7785a612bd1}\label{elevator_8h_a8008c6e5c3579e371d47d7785a612bd1}} 
void \hyperlink{elevator_8h_a8008c6e5c3579e371d47d7785a612bd1}{elevator\+\_\+stop\+Motor} ()
\begin{DoxyCompactList}\small\item\em Stops the motor. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{elevator_8h_a407c3ce1e4fbd0de04e04eacdfde1125}\label{elevator_8h_a407c3ce1e4fbd0de04e04eacdfde1125}} 
void \hyperlink{elevator_8h_a407c3ce1e4fbd0de04e04eacdfde1125}{elevator\+\_\+go\+Down} ()
\begin{DoxyCompactList}\small\item\em Starts the motor, making the elevator go downwards. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{elevator_8h_a685344f824b86e2bf2f859e23c48adfb}\label{elevator_8h_a685344f824b86e2bf2f859e23c48adfb}} 
void \hyperlink{elevator_8h_a685344f824b86e2bf2f859e23c48adfb}{elevator\+\_\+go\+Up} ()
\begin{DoxyCompactList}\small\item\em Starts the motor, making the elevator go upwards. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{elevator_8h_a406bc285aac731104e639c41cba95f70}\label{elevator_8h_a406bc285aac731104e639c41cba95f70}} 
void \hyperlink{elevator_8h_a406bc285aac731104e639c41cba95f70}{elevator\+\_\+open\+Doors} ()
\begin{DoxyCompactList}\small\item\em Turns on the open doors-\/light (opening the doors). \end{DoxyCompactList}\item 
\mbox{\Hypertarget{elevator_8h_a5a7bb805d1665582566bbc8c9de7deba}\label{elevator_8h_a5a7bb805d1665582566bbc8c9de7deba}} 
void \hyperlink{elevator_8h_a5a7bb805d1665582566bbc8c9de7deba}{elevator\+\_\+close\+Doors} ()
\begin{DoxyCompactList}\small\item\em Turns off the open doors-\/light (closing the doors). \end{DoxyCompactList}\item 
\mbox{\Hypertarget{elevator_8h_a4b2ef271ceadfcf2eb88a8588a0acf8d}\label{elevator_8h_a4b2ef271ceadfcf2eb88a8588a0acf8d}} 
void \hyperlink{elevator_8h_a4b2ef271ceadfcf2eb88a8588a0acf8d}{elevator\+\_\+handle\+Order} ()
\begin{DoxyCompactList}\small\item\em Removes all orders at the elevator\textquotesingle{}s current floor from the order\+Queue. \end{DoxyCompactList}\item 
int \hyperlink{elevator_8h_af358cc87d28a26347bfa29ba3b8ce8ad}{elevator\+\_\+orders\+At\+This\+Floor} ()
\begin{DoxyCompactList}\small\item\em Checks whether there are any orders at the elevator\textquotesingle{}s current floor or not. \end{DoxyCompactList}\item 
int \hyperlink{elevator_8h_aa7a3445779b6ca7b8c18e08d4b2d31be}{elevator\+\_\+obstruction} ()
\begin{DoxyCompactList}\small\item\em Checks whether there is an obstruction or not. \end{DoxyCompactList}\item 
int \hyperlink{elevator_8h_a524a77c9ab579a056f1961f4dca8472a}{elevator\+\_\+stop\+Signal} ()
\begin{DoxyCompactList}\small\item\em Checks if the stop-\/button is pressed. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{elevator_8h_ae0780fecb993191ed0085aa574cd3073}\label{elevator_8h_ae0780fecb993191ed0085aa574cd3073}} 
void \hyperlink{elevator_8h_ae0780fecb993191ed0085aa574cd3073}{elevator\+\_\+stop\+Light\+Off} ()
\begin{DoxyCompactList}\small\item\em Turns off the stop-\/light. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{elevator_8h_a43adfba5917de9c20d7f8df9aff7aa03}\label{elevator_8h_a43adfba5917de9c20d7f8df9aff7aa03}} 
void \hyperlink{elevator_8h_a43adfba5917de9c20d7f8df9aff7aa03}{elevator\+\_\+stop\+Light\+On} ()
\begin{DoxyCompactList}\small\item\em Turns on the stop-\/light. \end{DoxyCompactList}\item 
int \hyperlink{elevator_8h_a18f4e6c420b9e8d1b49a28cdb4d41331}{elevator\+\_\+check\+For\+Stop} ()
\begin{DoxyCompactList}\small\item\em Checks the criteria for going into state {\ttfamily E\+M\+E\+R\+G\+E\+N\+C\+Y\+\_\+\+S\+T\+OP}. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{elevator_8h_af483a333cacb44a46fc9308c0eb6fe86}\label{elevator_8h_af483a333cacb44a46fc9308c0eb6fe86}} 
void \hyperlink{elevator_8h_af483a333cacb44a46fc9308c0eb6fe86}{elevator\+\_\+clear\+All\+Order\+Lights} ()
\begin{DoxyCompactList}\small\item\em Turns all orders\textquotesingle{} lights off. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{elevator_8h_a6e7c4459387958be26802d25690f961a}\label{elevator_8h_a6e7c4459387958be26802d25690f961a}} 
void \hyperlink{elevator_8h_a6e7c4459387958be26802d25690f961a}{elevator\+\_\+clear\+All\+Orders} ()
\begin{DoxyCompactList}\small\item\em Deletes all active orders in order\+Queue. \end{DoxyCompactList}\end{DoxyCompactItemize}
\subsection*{Variables}
\begin{DoxyCompactItemize}
\item 
\mbox{\Hypertarget{elevator_8h_aef14a0a3a304f9fb8a2ddaf230fdb97c}\label{elevator_8h_aef14a0a3a304f9fb8a2ddaf230fdb97c}} 
int \hyperlink{elevator_8h_aef14a0a3a304f9fb8a2ddaf230fdb97c}{g\+\_\+\+F\+L\+O\+OR}
\begin{DoxyCompactList}\small\item\em Global variable that is updated to always hold the elevator\textquotesingle{}s last floor if between floors, or current floor if it\textquotesingle{}s at a floor. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{elevator_8h_a70fbd4c118a0dae974c708fe9906efc0}\label{elevator_8h_a70fbd4c118a0dae974c708fe9906efc0}} 
\hyperlink{hardware_8h_a2167c399a24df296afc432bcb88228af}{Hardware\+Movement} \hyperlink{elevator_8h_a70fbd4c118a0dae974c708fe9906efc0}{g\+\_\+current\+Move\+Direction}
\begin{DoxyCompactList}\small\item\em Global variable that is updated to always hold the elevator\textquotesingle{}s current movement direction. Note that stop is not considered a direction. In cases of the elevator standing still, the elevator\textquotesingle{}s last direction is held. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{elevator_8h_a89ae5b67fc5f32ffb3bd2b33d7937153}\label{elevator_8h_a89ae5b67fc5f32ffb3bd2b33d7937153}} 
\hyperlink{structOrder}{Order} $\ast$ \hyperlink{elevator_8h_a89ae5b67fc5f32ffb3bd2b33d7937153}{p\+\_\+first\+Order}
\begin{DoxyCompactList}\small\item\em Global pointer that points to the first element of order\+Queue. \end{DoxyCompactList}\end{DoxyCompactItemize}


\subsection{Detailed Description}
elevator operations and states are in this file. 



\subsection{Function Documentation}
\mbox{\Hypertarget{elevator_8h_a6fb864f464d5b4430d4daf8ab7fd9f40}\label{elevator_8h_a6fb864f464d5b4430d4daf8ab7fd9f40}} 
\index{elevator.\+h@{elevator.\+h}!elevator\+\_\+am\+I\+At\+Any\+Floor@{elevator\+\_\+am\+I\+At\+Any\+Floor}}
\index{elevator\+\_\+am\+I\+At\+Any\+Floor@{elevator\+\_\+am\+I\+At\+Any\+Floor}!elevator.\+h@{elevator.\+h}}
\subsubsection{\texorpdfstring{elevator\+\_\+am\+I\+At\+Any\+Floor()}{elevator\_amIAtAnyFloor()}}
{\footnotesize\ttfamily int elevator\+\_\+am\+I\+At\+Any\+Floor (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})}



Checks whether the elevator is at a floor or inbetween floors. Note that this function does not check which floor the elevator might be at, only whether it\textquotesingle{}s at one or not. 

\begin{DoxyReturn}{Returns}
0 if between floors, 1 if at a floor. Note that it could be at any of the available floors if 1 is returned! 
\end{DoxyReturn}


Definition at line 73 of file elevator.\+c.

\mbox{\Hypertarget{elevator_8h_a08f3a6ced7b1be73a7189dfce3e9f2b9}\label{elevator_8h_a08f3a6ced7b1be73a7189dfce3e9f2b9}} 
\index{elevator.\+h@{elevator.\+h}!elevator\+\_\+am\+I\+At\+Floor@{elevator\+\_\+am\+I\+At\+Floor}}
\index{elevator\+\_\+am\+I\+At\+Floor@{elevator\+\_\+am\+I\+At\+Floor}!elevator.\+h@{elevator.\+h}}
\subsubsection{\texorpdfstring{elevator\+\_\+am\+I\+At\+Floor()}{elevator\_amIAtFloor()}}
{\footnotesize\ttfamily int elevator\+\_\+am\+I\+At\+Floor (\begin{DoxyParamCaption}\item[{int}]{target\+Floor }\end{DoxyParamCaption})}



Checks if target destination (first element of order\+Queue) is reached. 


\begin{DoxyParams}{Parameters}
{\em target\+Floor} & Floor of first element in order\+Queue.\\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
1 if true, 0 if not yet reached. 
\end{DoxyReturn}


Definition at line 59 of file elevator.\+c.

\mbox{\Hypertarget{elevator_8h_a6a2cb30d149b5ce3abcf9ca57fce26a3}\label{elevator_8h_a6a2cb30d149b5ce3abcf9ca57fce26a3}} 
\index{elevator.\+h@{elevator.\+h}!elevator\+\_\+check\+And\+Add\+Order@{elevator\+\_\+check\+And\+Add\+Order}}
\index{elevator\+\_\+check\+And\+Add\+Order@{elevator\+\_\+check\+And\+Add\+Order}!elevator.\+h@{elevator.\+h}}
\subsubsection{\texorpdfstring{elevator\+\_\+check\+And\+Add\+Order()}{elevator\_checkAndAddOrder()}}
{\footnotesize\ttfamily void elevator\+\_\+check\+And\+Add\+Order (\begin{DoxyParamCaption}\item[{int}]{current\+Floor,  }\item[{\hyperlink{hardware_8h_a2167c399a24df296afc432bcb88228af}{Hardware\+Movement}}]{move\+Direction }\end{DoxyParamCaption})}



Checks if someone places any valid order at any place. Will initialize this order and adds it to order\+Queue. 


\begin{DoxyParams}{Parameters}
{\em current\+Floor} & The elevator\textquotesingle{}s current floor, upon receiving a request to add an order.\\
\hline
{\em move\+Direction} & The elevator\textquotesingle{}s current direction, upon receiving a request to add an order. \\
\hline
\end{DoxyParams}


Definition at line 87 of file elevator.\+c.

\mbox{\Hypertarget{elevator_8h_a18f4e6c420b9e8d1b49a28cdb4d41331}\label{elevator_8h_a18f4e6c420b9e8d1b49a28cdb4d41331}} 
\index{elevator.\+h@{elevator.\+h}!elevator\+\_\+check\+For\+Stop@{elevator\+\_\+check\+For\+Stop}}
\index{elevator\+\_\+check\+For\+Stop@{elevator\+\_\+check\+For\+Stop}!elevator.\+h@{elevator.\+h}}
\subsubsection{\texorpdfstring{elevator\+\_\+check\+For\+Stop()}{elevator\_checkForStop()}}
{\footnotesize\ttfamily int elevator\+\_\+check\+For\+Stop (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})}



Checks the criteria for going into state {\ttfamily E\+M\+E\+R\+G\+E\+N\+C\+Y\+\_\+\+S\+T\+OP}. 

\begin{DoxyReturn}{Returns}
1 if criteria are met, 0 if not. 
\end{DoxyReturn}


Definition at line 210 of file elevator.\+c.

\mbox{\Hypertarget{elevator_8h_a2838e9ede4e7884da6efa80c9cc21c46}\label{elevator_8h_a2838e9ede4e7884da6efa80c9cc21c46}} 
\index{elevator.\+h@{elevator.\+h}!elevator\+\_\+find\+Current\+Floor@{elevator\+\_\+find\+Current\+Floor}}
\index{elevator\+\_\+find\+Current\+Floor@{elevator\+\_\+find\+Current\+Floor}!elevator.\+h@{elevator.\+h}}
\subsubsection{\texorpdfstring{elevator\+\_\+find\+Current\+Floor()}{elevator\_findCurrentFloor()}}
{\footnotesize\ttfamily int elevator\+\_\+find\+Current\+Floor (\begin{DoxyParamCaption}\item[{int}]{last\+Floor }\end{DoxyParamCaption})}



Checks if new floor is reached. 


\begin{DoxyParams}{Parameters}
{\em last\+Floor} & The last floor you visited.\\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
New floor if new signal is read, returns {\ttfamily last\+Floor} floor if no new signals are read. 
\end{DoxyReturn}


Definition at line 44 of file elevator.\+c.

\mbox{\Hypertarget{elevator_8h_aa7a3445779b6ca7b8c18e08d4b2d31be}\label{elevator_8h_aa7a3445779b6ca7b8c18e08d4b2d31be}} 
\index{elevator.\+h@{elevator.\+h}!elevator\+\_\+obstruction@{elevator\+\_\+obstruction}}
\index{elevator\+\_\+obstruction@{elevator\+\_\+obstruction}!elevator.\+h@{elevator.\+h}}
\subsubsection{\texorpdfstring{elevator\+\_\+obstruction()}{elevator\_obstruction()}}
{\footnotesize\ttfamily int elevator\+\_\+obstruction (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})}



Checks whether there is an obstruction or not. 

\begin{DoxyReturn}{Returns}
1 if there is an obstruction, 0 if not. 
\end{DoxyReturn}


Definition at line 194 of file elevator.\+c.

\mbox{\Hypertarget{elevator_8h_af358cc87d28a26347bfa29ba3b8ce8ad}\label{elevator_8h_af358cc87d28a26347bfa29ba3b8ce8ad}} 
\index{elevator.\+h@{elevator.\+h}!elevator\+\_\+orders\+At\+This\+Floor@{elevator\+\_\+orders\+At\+This\+Floor}}
\index{elevator\+\_\+orders\+At\+This\+Floor@{elevator\+\_\+orders\+At\+This\+Floor}!elevator.\+h@{elevator.\+h}}
\subsubsection{\texorpdfstring{elevator\+\_\+orders\+At\+This\+Floor()}{elevator\_ordersAtThisFloor()}}
{\footnotesize\ttfamily int elevator\+\_\+orders\+At\+This\+Floor (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})}



Checks whether there are any orders at the elevator\textquotesingle{}s current floor or not. 

\begin{DoxyReturn}{Returns}
1 if there are any orders at the elevator\textquotesingle{}s current floor, 0 if not. 
\end{DoxyReturn}


Definition at line 184 of file elevator.\+c.

\mbox{\Hypertarget{elevator_8h_a5e3ee96258c5727f28b6f935938c232f}\label{elevator_8h_a5e3ee96258c5727f28b6f935938c232f}} 
\index{elevator.\+h@{elevator.\+h}!elevator\+\_\+set\+Relative\+Position@{elevator\+\_\+set\+Relative\+Position}}
\index{elevator\+\_\+set\+Relative\+Position@{elevator\+\_\+set\+Relative\+Position}!elevator.\+h@{elevator.\+h}}
\subsubsection{\texorpdfstring{elevator\+\_\+set\+Relative\+Position()}{elevator\_setRelativePosition()}}
{\footnotesize\ttfamily void elevator\+\_\+set\+Relative\+Position (\begin{DoxyParamCaption}\item[{\hyperlink{hardware_8h_a2167c399a24df296afc432bcb88228af}{Hardware\+Movement}}]{move\+Direction }\end{DoxyParamCaption})}



Sets new {\ttfamily g\+\_\+relative\+Position} when needed. Keeps track of where we are. 


\begin{DoxyParams}{Parameters}
{\em move\+Direction} & the elevators current move direction. \\
\hline
\end{DoxyParams}


Definition at line 121 of file elevator.\+c.

\mbox{\Hypertarget{elevator_8h_a524a77c9ab579a056f1961f4dca8472a}\label{elevator_8h_a524a77c9ab579a056f1961f4dca8472a}} 
\index{elevator.\+h@{elevator.\+h}!elevator\+\_\+stop\+Signal@{elevator\+\_\+stop\+Signal}}
\index{elevator\+\_\+stop\+Signal@{elevator\+\_\+stop\+Signal}!elevator.\+h@{elevator.\+h}}
\subsubsection{\texorpdfstring{elevator\+\_\+stop\+Signal()}{elevator\_stopSignal()}}
{\footnotesize\ttfamily int elevator\+\_\+stop\+Signal (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})}



Checks if the stop-\/button is pressed. 

\begin{DoxyReturn}{Returns}
1 if the stop-\/button is pressed, 0 if not. 
\end{DoxyReturn}


Definition at line 198 of file elevator.\+c.

